#!/usr/bin/env bds
#vim: syntax=java

// depends on external git repo: https://github.com/kundajelab/chipqc
// needs to have $script_dir/chipqc/run_chipqc.py

include "species.bds"


help == CHIPQC settings
tss_enrich 	:= "" 		help TSS enrichment bed for chipqc.
dnase 		:= ""		help DNase bed (open chromatin region file) for chipqc.
prom 		:= ""		help Promoter bed (promoter region file) for chipqc.
enh 		:= ""		help Enhancer bed (enhancer region file) for chipqc.
reg2map 	:= ""		help Reg2map (file with cell type signals) for chipqc.
reg2map_bed 	:= ""		help Reg2map_bed (file of regions used to generate reg2map signals) for chipqc.
roadmap_meta 	:= ""		help Roadmap metadata for chipqc.

mem_chipqc 	:= "20G"	help Max. memory for CHIPQC (default: 20G).
wt_chipqc	:= "47h"	help Walltime for CHIPQC (default: 47h, 47:00:00).

grp_color_chipqc := "pink"

init_chipqc()

void init_chipqc() {

	tss_enrich 	= get_conf_val( tss_enrich,	["tss_enrich"] )
	dnase 		= get_conf_val( dnase,		["dnase"] )
	prom 		= get_conf_val( prom,		["prom"] )
	enh 		= get_conf_val( enh,		["enh"] )
	reg2map 	= get_conf_val( reg2map,	["reg2map"] )
	reg2map_bed 	= get_conf_val( reg2map_bed,	["reg2map_bed"] )
	roadmap_meta 	= get_conf_val( roadmap_meta,	["roadmap_meta"] )

	mem_chipqc 	= get_conf_val( mem_chipqc,	["mem_chipqc"] )
	wt_chipqc	= get_conf_val( wt_chipqc,	["wt_chipqc"] )

	if ( reg2map_bed == "" ) reg2map_bed = dnase

	print("\n\n== CHIPQC settings\n")
	print( "TSS enrichment bed\t\t: $tss_enrich\n" )
	print( "DNase bed for chipqc\t\t: $dnase\n" )
	print( "Promoter bed for chipqc\t\t: $prom\n" )
	print( "Enhancer bed for chipqc\t\t: $enh\n" )
	print( "Reg2map for chipqc\t\t\t: $reg2map\n" )
	print( "Reg2map_bed for chipqc\t\t: $reg2map_bed\n" )
	print( "Roadmap metadata for chipqc\t: $roadmap_meta\n" )
	print( "Max. memory for CHIPQC\t\t\t: $mem_chipqc\n")
	print( "Walltime for CHIPQC\t\t\t: $wt_chipqc\n")
}

bool chk_chipqc() {

	print("\nChecking parameters and data files for CHIPQC. \n\n")
	disable_chipqc := false

	if ( species == "" ) 	{ print("Warning: Genome name is missing ( '-species [GENOME_NAME; hg19, mm9, ...]' )!\n" ); disable_chipqc  = true }
	if ( ref_fa == "" ) 	{ print("Warning: Specify your reference genome .fa ('-ref_fa [FA]')!\n"); disable_chipqc  = true }
	if ( tss_enrich == "" ) { print("Warning: TSS enrichment bed is missing ( '-tss_enrich' )!\n"); disable_chipqc  = true }
	//if ( blacklist == "" ) 	{ print("Warning: Blacklist bed is missing ( '-blacklist' )!\n"); disable_chipqc  = true }
	//if ( prom == "" ) 	{ print("Warning: Promoter bed is missing ( '-prom' )!\n"); disable_chipqc  = true }
	//if ( enh == "" ) 	{ print("Warning: Enhancer bed is missing ( '-enh' )!\n"); disable_chipqc  = true }
	// if ( reg2map == "" ) 	{ print("Warning: reg2map is missing ( '-reg2map' )!\n"); disable_chipqc  = true }
	// if ( reg2map_bed == "" ){ print("Warning: reg2map_bed is missing ( '-reg2map_bed' )!\n"); disable_chipqc  = true }
	// if ( roadmap_meta == "" ) { print("Warning: Roadmap metadata are missing ( '-roadmap_meta' )!\n"); disable_chipqc  = true }

	if ( disable_chipqc ) {
		print("\nDisabling CHIPQC...\n")
		return false
	}
	return true
}

string[] chipqc( string fastq1, string fastq2, string bam, string align_log, string pbc_log, \
		 string dup_log, string filt_bam, string bed, string bigwig, string peak, \
		 string peak_naive_overlap, string idr_peak, string o_dir, string group ) {

	prefix 		:= replace_dir( rm_ext( fastq1, ["fastq","fq"] ), o_dir ) + ( (fastq2!="") ? ".PE2SE" : "" )

	html 		:= "$prefix"+"_qc.html"
	txt 		:= "$prefix"+"_qc.txt"
	prefix_basename := get_basename( prefix )

	param_fastq 	:= (fastq2!="") ? " --fastq1 $fastq1 --fastq2 $fastq2" : " --fastq1 $fastq1"
        param_blacklist 	:= (blacklist!="") ? " --blacklist $blacklist" : ""
        param_prom 	:= (prom!="") ? " --prom $prom" : ""
        param_enh 	:= (enh!="") ? " --enh $enh" : ""        
        

	species_chipqc 	:= species.indexOf("_")>=0 ? (species.split("_"))[0] : species
	print("species_chipqc: $species_chipqc\n")

	in  	:= (fastq2!="") ? [ fastq1, fastq2, bam, align_log, pbc_log, dup_log, filt_bam, bed, bigwig, peak ] \
				: [ fastq1, bam, align_log, pbc_log, dup_log, filt_bam, bed, bigwig, peak ]
	out 	:= [ html, txt ] //, gc_plot, hist_graph, lg_vplot, vplot, signal ]

	taskName:= "chipqc "+group
	mem := get_res_mem(mem_chipqc,1)
	max_java_heap 	:= binary_prefix( (mem==-1) ? parse_mem( mem_chipqc ) : (mem*3)/4 )
	timeout := get_res_wt(wt_chipqc)

	wait_par( cpus )

	tid := task( out<-in ) {

		sys $shcmd_init

		// To prevent java heap space error (Exception in thread "main" java.lang.OutOfMemoryError: Java heap space)
		sys export _JAVA_OPTIONS="-Xms256M -Xmx$max_java_heap -XX:ParallelGCThreads=1"
		sys if [ -d "${TMPDIR}" ]; then \
			export _JAVA_OPTIONS="${_JAVA_OPTIONS} -Djava.io.tmpdir=${TMPDIR}"; \
		fi
		sys cd $o_dir

		// # if PICARDROOT is not defined, then look into ../shared/picard* (default picard dir. in bioconda)
		sys if [ -f "$(which picard)" ]; then export PICARDROOT="$(dirname $(which picard))/../share/picard"*; fi

		sys $script_dir/chipqc/run_chipqc_single_lib.py \
		    --workdir $o_dir \
		    --outdir $o_dir \
		    --outprefix $prefix_basename \
		    --genome $species_chipqc \
		    --chromsizes $chrsz \
		    --ref $ref_fa \
		    --tss $tss_enrich \
		    --pbc $pbc_log\
		    $param_fastq \
		    --alignedbam $bam \
		    --alignmentlog $align_log \
		    --coordsortbam $bam \
		    --duplog $dup_log \
		    --finalbam $filt_bam \
		    --finalbed $bed \
		    --bigwig $bigwig \
		    --peaks $peak \
		    $param_blacklist $param_prom $param_enh

		//sys rm -f test.log test.png

		sys $shcmd_finalize
	}

	register_par( tid, cpus )

	add_task_to_graph( in, out, group, "CHIPQC", grp_color_chipqc )

	return out
}

